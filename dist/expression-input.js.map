{"version":3,"file":"expression-input.js","sourceRoot":"","sources":["../src/expression-input.ts"],"names":[],"mappings":"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","sourcesContent":["import {html} from 'lit'\nimport { classMap } from 'lit/directives/class-map.js'\nimport {customElement, property} from 'lit/decorators.js'\nimport { InputChain } from './input-chain.js'\n\n/**\n * @element expression-input\n * Web component to create an expression\n * Extends the InputChain component and adds\n * - [x] fixed value UI\n * - [x] dirty state\n * - [x] placeholder\n * - [x] reset mechanism\n *\n * It adds these properties\n * - [x] value and initial value\n * - [ ] dirty\n * \n * It adds these attributes\n * - [x] allowFixed\n * - [x] fixed\n * \n * It has these spots\n * \n * - [x] default: the select elements for the expression\n * - [x] label\n * - [x] dirty-icon\n */\n\n@customElement('expression-input')\nexport class ExpressionInput extends InputChain {\n  /**\n   * Read only property dirty\n   * @readonly\n   */\n  get dirty() {\n    //return JSON.stringify(this.value) !== JSON.stringify(this.initialValue)\n    console.log(this.options.filter(o => o.selected))\n    return !!this.options\n      .filter(o => o.selected && !!o.value)\n      .length || !!this.getFixedInput()?.value?.length\n  }\n\n  /**\n   * Value is the concatenation of all options' values\n   * @readonly\n   */\n  get value(): string[] {\n    return this.options\n      .filter(o => o.selected)\n      .map(o => o.value)\n  }\n\n  /**\n   * Initial value to be set to track changes\n   */\n  //initialValue: string[] = []\n  //initialContent: Node[] = []\n\n  @property({type: Boolean, attribute: 'allow-fixed'})\n  allowFixed = true\n\n  @property({type: Boolean, attribute: 'fixed', reflect: true})\n  fixed = false\n\n  @property()\n  placeholder = 'Enter a fixed value or switch to expression'\n\n  override connectedCallback() {\n    super.connectedCallback()\n    //this.save()\n  }\n\n  /**\n   * Render the component\n   */\n  override render() {\n    return html`\n      <!-- header -->\n      <header part=\"header\" class=\"header\">\n        <label>\n          <slot name=\"label\"></slot>\n          <div class=${classMap({dirty: this.dirty, 'property-name': true})} part=\"property-name\">\n            ${this.dirty ? html`\n              <slot name=\"dirty-icon\" part=\"dirty-icon\" class=\"dirty-icon\" @click=${this.reset}>\n                <svg viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"></path></svg>\n              </slot>\n            ` : html``}\n          </div>\n          ${this.allowFixed ? html`\n            <div part=\"fixed-selector\" class=\"fixed-selector\">\n              <span\n                class=${classMap({active: this.fixed, 'fixed-selector-fixed': true})}\n                @click=${() => this.fixed = true}\n                part=\"fixed-selector-fixed\"\n              >Fixed</span>\n              <span\n                class=${classMap({active: !this.fixed, 'fixed-selector-expression': true})}\n                @click=${() => this.fixed = false}\n                part=\"fixed-selector-expression\"\n              >Expression</span>\n            </div>\n          ` : html``}\n        </label>\n      </header>\n      <div part=\"property-container\" class=\"property-container\">\n        <slot>${this.options.length ? '' : this.placeholder}</slot>\n      </div>\n    `\n  }\n\n  // <slot name=\"fixed\">\n  //   <input\n  //     part=\"property-input\" class=\"property-input\"\n  //     placeholder=${this.placeholder}\n  //     type=\"text\"\n  //     value=${this.options[0]?.value}\n  //     @change=${(event: InputEvent) => this.fixedValueChanged(event)}\n  //   >\n  // </slot>\n  //fixedValueChanged(event: Event) {\n  //  event.preventDefault()\n  //  event.stopImmediatePropagation()\n  //  const value = (event.target as HTMLInputElement).value\n  //  console.log('fixedValueChanged', value)\n  //  // Remove all options but the first\n  //  const options = this.options\n  //  options\n  //    .slice(1)\n  //    .forEach(o => o.remove())\n  //  // Reset the first\n  //  options[0].selected = false\n  //  // Change event\n  //  this.dispatchEvent(new Event('change'))\n  //  this.requestUpdate()\n  //}\n\n  // /**\n  //  * Reset dirty flag and store the current value as initial value\n  //  */\n  // public save() {\n  //   this.initialValue = this.options\n  //     .filter(o => o.selected)\n  //     .map(o => o.value)\n  //   this.initialContent = Array.from(this.children)\n  //     .map(o => o.cloneNode(true))\n  //   this.dispatchEvent(new Event('change'))\n  //   this.requestUpdate()\n  // }\n\n  /**\n   * Reset dirty flag and restore the initial value\n   */\n  reset() {\n    //// Remove all children\n    //Array.from(this.children)\n    //  .forEach(o => o.remove())\n    //// Add the previous content\n    //this.initialContent\n    //  .map(o => o.cloneNode(true))\n    //  .forEach(o => this.appendChild(o))\n    // Remove all children but the first\n    if(this.fixed) {\n      const input = this.getFixedInput()\n      if(input) {\n        input.value = ''\n      } else {\n        throw new Error('Input not found for fixed value')\n      }\n    } else {\n      this.changeAt(-1)\n    }\n    this.requestUpdate()\n  }\n\n  getFixedInput(): HTMLInputElement | null {\n    return this.querySelector('input, textarea')\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'expression-input': ExpressionInput\n  }\n}\n\n"]}