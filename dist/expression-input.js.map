{"version":3,"file":"expression-input.js","sourceRoot":"","sources":["../src/expression-input.ts"],"names":[],"mappings":"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","sourcesContent":["import {html} from 'lit'\nimport { classMap } from 'lit/directives/class-map.js'\nimport {customElement, property} from 'lit/decorators.js'\nimport { InputChain } from './input-chain.js'\n\n/**\n * @element expression-input\n * Web component to create an expression\n * Extends the InputChain component and adds\n * - [x] fixed value UI\n * - [x] dirty state\n * - [x] placeholder\n * - [x] reset mechanism\n * - [ ] copy/paste hole expressions (using clipboard API)\n *\n * It adds these properties\n * - [x] value and initial value\n * - [ ] dirty\n * \n * It adds these attributes\n * - [x] allowFixed\n * - [x] fixed\n * \n * It has these spots\n * \n * - [x] default: the select elements for the expression\n * - [x] label\n * - [x] dirty-icon\n */\n\n@customElement('expression-input')\nexport class ExpressionInput extends InputChain {\n  /**\n   * Read only property dirty\n   * @readonly\n   */\n  get dirty() {\n    //return JSON.stringify(this.value) !== JSON.stringify(this.initialValue)\n    return this.value.length > 0\n  }\n\n  /**\n   * Value is the concatenation of all options' values\n   * @readonly\n   */\n  get value(): string[] {\n    return this.fixed ? [this.getFixedInput()?.value]\n      .filter(v => !!v) as string[]\n    : this.options\n      .filter(o => o.selected && o.value)\n      .map(o => o.value)\n  }\n\n  /**\n   * Initial value to be set to track changes\n   */\n  //initialValue: string[] = []\n  //initialContent: Node[] = []\n\n  @property({type: Boolean, attribute: 'allow-fixed'})\n  allowFixed = true\n\n  private _fixed = false\n\n  @property({type: Boolean, attribute: 'fixed', reflect: true})\n  get fixed() {\n    return this._fixed\n  }\n  set fixed(value) {\n    this._fixed = value\n    this.dispatchEvent(new Event('fixedChange'))\n  }\n\n  @property()\n  placeholder = 'Enter a fixed value or switch to expression'\n\n  override connectedCallback() {\n    super.connectedCallback()\n    //this.save()\n  }\n\n  /**\n   * Render the component\n   */\n  override render() {\n    const dirty = this.dirty\n    return html`\n      <!-- header -->\n      <header part=\"header\" class=\"header\">\n        <label>\n          <div class=${classMap({dirty, 'property-name': true})} part=\"property-name\">\n            <slot name=\"label\"></slot>\n            ${dirty ? html`\n              <slot name=\"dirty-icon\" part=\"dirty-icon\" class=\"dirty-icon\" @click=${this.reset}>\n                <svg viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"></path></svg>\n              </slot>\n            ` : html``}\n          </div>\n          ${this.allowFixed ? html`\n            <div part=\"fixed-selector\" class=\"fixed-selector\">\n              <span\n                class=${classMap({active: this.fixed, 'fixed-selector-fixed': true})}\n                @click=${() => this.fixed = true}\n                part=\"fixed-selector-fixed\"\n              >Fixed</span>\n              <span\n                class=${classMap({active: !this.fixed, 'fixed-selector-expression': true})}\n                @click=${() => this.fixed = false}\n                part=\"fixed-selector-expression\"\n              >Expression</span>\n            </div>\n          ` : html``}\n        </label>\n      </header>\n      <div part=\"property-container\" class=${classMap({'property-container': true, fixed: this.fixed})}>\n        <slot class=\"hide-when-fixed\">${this.options.length ? '' : this.placeholder}</slot>\n        <slot name=\"fixed\" part=\"fixed\" class=\"show-when-fixed\"></slot>\n      </div>\n    `\n  }\n\n  /**\n   * Reset dirty flag and restore the initial value\n   */\n  reset() {\n    if(this.fixed) {\n      const input = this.getFixedInput()\n      if(input) {\n        input.value = ''\n      } else {\n        throw new Error('Input not found for fixed value')\n      }\n    } else {\n      this.changeAt(0, true)\n    }\n    this.dispatchEvent(new Event('change'))\n    this.requestUpdate()\n  }\n\n  getFixedInput(): HTMLInputElement | null {\n    return this.querySelector('input, textarea')\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'expression-input': ExpressionInput\n  }\n}\n\n"]}