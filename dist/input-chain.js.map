{"version":3,"file":"input-chain.js","sourceRoot":"","sources":["../src/input-chain.ts"],"names":[],"mappings":"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","sourcesContent":["import {LitElement, html} from 'lit'\nimport {customElement, property} from 'lit/decorators.js'\nimport { inputChainStyles } from './styles.js'\n\n/**\n * @element input-chain\n * Web component to select a sequence of steps, each step being a <select> element.\n * \n * Children are expected to be input or select html elements\n * \n * Features\n * - Nested Select Elements: Allows embedding <select> elements as children.\n * - Dynamic Interaction: Automatically updates subsequent select elements upon a change in any select element, resetting them to a default state.\n * - Event Handling: Emits change events whenever the value of a child select element changes.\n * - Validation Support: Supports form validation attributes like required, minlength, and maxlength.\n * - Combined Options Property: Holds a property with a concatenation of all options from child select elements.\n * - Supports option groups: Allows grouping options in the same select element.\n * \n * It has these events:\n * - [x] change\n * \n * It has these attributes:\n * - [x] name for form submission\n * - [x] for (form id)\n * - [ ] maxlength\n * - [ ] minlength\n * \n * It has these properties:\n * - [x] options: a concatenation of all options from child select elements\n * \n * It has these slots:\n * - [x] default: contains the select elements\n * \n */\n\n@customElement('input-chain')\nexport class InputChain extends LitElement {\n  static override styles = inputChainStyles\n\n  /**\n   * Form id\n   * This is the same API as input elements\n   */\n  @property({type: String, attribute: 'for'})\n  for = ''\n\n  /**\n   * Name of the property\n   * This is the same API as input elements\n   */\n  @property({type: String})\n  name = ''\n\n  constructor() {\n    super()\n  }\n\n  /**\n   * Form setter\n   * Handle formdata event to add the current value to the form\n   */\n  protected _form: HTMLFormElement | null = null\n  protected set form(newForm: HTMLFormElement | null) {\n    if(this._form) {\n      this._form.removeEventListener('formdata', this.onFormdata)\n    }\n    if(newForm) {\n      newForm.addEventListener('formdata', this.onFormdata)\n    }\n  }\n  protected get form() {\n    return this._form\n  }\n\n  /**\n   * All selected options\n   * @readonly\n   */\n  @property({type: Array})\n  get options(): HTMLOptionElement[] {\n    return Array.from(this.querySelectorAll(':scope > select option, :scope > select custom-option'))\n  }\n\n  private onChange_ = this.onChange.bind(this)\n\n  /**\n   * Handle formdata event to add the current value to the form\n   */\n  protected onFormdata = (event: FormDataEvent) => {\n    if(!this.name) {\n      throw new Error('Attribute name is required for input-chain')\n    }\n    this.options\n    .filter(option => option.selected)\n    .forEach(option => {\n      event.formData.append(this.name, option.value)\n    })\n  }\n\n  /**\n   * Render the component\n   */\n  override render() {\n    return html`\n      <slot></slot>\n    `\n  }\n\n  override connectedCallback() {\n    super.connectedCallback()\n    // Use the form to add formdata\n    if(this.for) {\n      const form = document.querySelector<HTMLFormElement>(`form#${this.for}`)\n      if(form) {\n        this.form = form\n      }\n    } else {\n      this.form = this.closest('form')\n    }\n    // Listen to slots changes\n    this.shadowRoot!.addEventListener('change', this.onChange_)\n  }\n\n  override disconnectedCallback() {\n    this.removeEventListener('change', this.onChange_)\n    this.form = null\n    super.disconnectedCallback()\n  }\n\n  /**\n   * The data changed\n   * Reset the steps after the change\n   */\n  private onChange(event: Event) {\n    const target = event.target as HTMLSelectElement\n    const children = Array.from(this.querySelectorAll(':scope > select, :scope > custom-select')) as HTMLSelectElement[]\n    if(!children.includes(target)) {\n      return\n    }\n    this.changeAt(children.indexOf(target))\n    // Dispatch our own event\n    event.preventDefault()\n    event.stopImmediatePropagation()\n    this.dispatchEvent(new Event('change'))\n    this.requestUpdate()\n  }\n\n  /**\n   * Reset the steps after the given index\n   */\n  protected changeAt(idx: number) {\n    const children = Array.from(this.querySelectorAll(':scope > select, :scope > custom-select')) as HTMLSelectElement[]\n    const target = idx >= 0 ? children[idx] : children[0]\n    const next = target?.value ? children[idx+1] : target || children[0]\n    const nextIndex = target?.value ? idx+1 : idx\n    if(next) {\n      // Remove all elements after next\n      children.slice(nextIndex + 1)\n        .forEach(child => child.remove())\n      // Reset next\n      next.value = ''\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'input-chain': InputChain\n  }\n}\n"]}