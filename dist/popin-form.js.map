{"version":3,"file":"popin-form.js","sourceRoot":"","sources":["../src/popin-form.ts"],"names":[],"mappings":"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","sourcesContent":["import {html} from 'lit'\nimport {customElement, property} from 'lit/decorators.js'\nimport { PopinOverlay } from './popin-overlay.js'\n\n/**\n * This component extends the `<popin-overlay>` component and the native `<form>` tag\n * It handles form submissions both as an input for the parent form and with it's children inputs\n * \n * Usage:\n * \n * ```\n * <popin-form hidden style=\"width: 400px\" no-auto-close>\n *   <div slot=\"header\">Header</div>\n *   <div slot=\"body\">Body</div>\n *   <div slot=\"footer\">Footer</div>\n * </popin-form>\n * ```\n * \n * @element popin-form \n * @htmltag popin-form \n * @htmlslot header - The header of the dialog\n * @htmlslot default - The body of the dialog\n * @htmlslot footer - The footer of the dialog\n * @cssprop {Color} --popin-form-header-background - The background color of the header\n * @cssprop {Color} --popin-form-body-background - The background color of the body\n * @cssprop {Color} --popin-form-footer-background - The background color of the footer\n * @cssprop {Color} --popin-form-header-color - The text color of the header\n * @cssprop {Color} --popin-form-body-color - The text color of the body\n * @cssprop {Color} --popin-form-footer-color - The text color of the footer\n * @cssprop {Border} --popin-form-header-border-bottom - The border of the header\n * @cssprop {Border} --popin-form-footer-border-top - The border of the footer\n * @cssprop {Padding} --popin-form-header-padding - The padding of the header\n * @cssprop {Padding} --popin-form-body-padding - The padding of the body\n * @cssprop {Padding} --popin-form-footer-padding - The padding of the footer\n * @cssprop {Color} --popin-button-background - The background color of the button\n * @cssprop {Color} --popin-button-color - The text color of the button\n * @cssprop {Color} --popin-button-hover-background - The background color of the button when hovered\n * @cssprop {Color} --popin-button-hover-color - The text color of the button when hovered\n * @cssprop {Border} --popin-button-border - The border of the button\n * @cssprop {Border} --popin-button-hover-border - The border of the button when hovered\n * @cssprop {Padding} --popin-button-padding - The padding of the button\n * @cssprop {Padding} --popin-button-hover-padding - The padding of the button when hovered\n * @cssprop {Margin} --popin-button-margin - The margin of the button\n * @cssprop {Margin} --popin-button-hover-margin - The margin of the button when hovered\n * @cssprop {BorderRadius} --popin-form-border-radius - The border radius of the dialog\n * @cssprop {Color} --popin-button-background--secondary - The background color of the secondary button\n * @cssprop {Color} --popin-button-color--secondary - The text color of the secondary button\n * @cssprop {Color} --popin-button-hover-background--secondary - The background color of the secondary button when hovered\n * @cssprop {Color} --popin-button-hover-color--secondary - The text color of the secondary button when hovered\n * @cssprop {Border} --popin-button-border--secondary - The border of the secondary button\n * @cssprop {Border} --popin-button-hover-border--secondary - The border of the secondary button when hovered\n * @cssprop {Padding} --popin-button-padding--secondary - The padding of the secondary button\n * @cssprop {Padding} --popin-button-hover-padding--secondary - The padding of the secondary button when hovered\n * @cssprop {Margin} --popin-button-margin--secondary - The margin of the secondary button\n * @cssprop {Margin} --popin-button-hover-margin--secondary - The margin of the secondary button when hovered\n * \n */\n\n@customElement('popin-form')\nexport class PopinForm extends PopinOverlay {\n  /**\n   * Form id\n   * This is the same API as input elements\n   */\n  @property({type: String, attribute: 'for'})\n  for = ''\n\n  @property({type: String})\n  name = ''\n\n  private formData = new FormData()\n\n  private onFormdata_ = this.onFormdata.bind(this)\n  private slotChanged_ = this.slotChanged.bind(this)\n\n  /**\n   * Form setter\n   * Handle formdata event to add the current value to the form\n   */\n  protected _form: HTMLFormElement | null = null\n  set form(newForm: HTMLFormElement | null) {\n    if(this._form) {\n      this._form.removeEventListener('formdata', this.onFormdata_)\n    }\n    if(newForm) {\n      newForm.addEventListener('formdata', this.onFormdata_)\n    }\n  }\n  get form() {\n    return this._form\n  }\n\n  override render() {\n    super.render() // For placement\n    return html`\n    <form @submit=${this.submit}>\n      <header>\n        <slot class=\"header\" name=\"header\"></slot>\n      </header>\n      <main>\n        <slot class=\"body\" part=\"body\"></slot>\n      </main>\n      <footer>\n        <slot class=\"footer\" name=\"footer\">\n          <button type=\"submit\">Apply</button>\n          <button type=\"button\" class=\"secondary\" @click=${this.close}>Cancel</button>\n        </slot>\n      </footer>\n    </form>\n    `\n  }\n\n  override connectedCallback() {\n    super.connectedCallback()\n    // Use the form to add formdata\n    if(this.for) {\n      const form = document.querySelector<HTMLFormElement>(`form#${this.for}`)\n      if(form) {\n        this.form = form\n      }\n    } else {\n      this.form = this.closest('form')\n    }\n    // Listen to slots changes\n    this.shadowRoot!.addEventListener('slotchange', this.slotChanged_)\n    // Update current list of inputs\n    this.slotChanged()\n  }\n\n  override disconnectedCallback() {\n    this.removeEventListener('slotchange', this.slotChanged_)\n    this.form = null\n    super.disconnectedCallback()\n  }\n\n  /**\n   * Handle slot change to update the form\n   */\n  private inputs: HTMLInputElement[] = []\n  private slotChanged() {\n    console.log('slot changed')\n    this.inputs = Array.from(this.querySelectorAll('input, select, textarea'))\n    this.inputs.forEach(input => {\n      if(input.name) {\n        input.setAttribute('data-name', input.name)\n        input.name = ''\n      }\n    })\n  }\n\n  /**\n   * Handle formdata event to add the current value to the form\n   */\n  private onFormdata(event: FormDataEvent) {\n    event.preventDefault()\n    const formData = event.formData\n    for(const [key, value] of this.formData.entries()) {\n      formData.set(`${this.name}-${key}`, value)\n    }\n  }\n\n  private submit(event: Event) {\n    event.preventDefault()\n    this.formData = new FormData()\n    for(const input of this.inputs) {\n      this.formData.set(input.getAttribute('data-name')!, input.value)\n    }\n    this.close()\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'popin-form': PopinForm\n  }\n}\n"]}