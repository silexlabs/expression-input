{"version":3,"file":"popin-dialog.js","sourceRoot":"","sources":["src/popin-dialog.ts"],"names":[],"mappings":"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","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n/**\n * This PopinDialog component is a simple dialog that can be used to display any html on top of your UI\n * It is not a modal, it is not blocking the UI, it is just a simple dialog that will catch focus and hide when the user press escape or click outside of it\n * The dialog will be automatically positioned where placed in the DOM but it will be moved and resized to be fully visible on all screen sizes\n * \n * Usage:\n * \n * ```\n * <popin-dialog hidden style=\"width: 400px\" no-auto-close>\n *   <div slot=\"header\">Header</div>\n *   <div slot=\"body\">Body</div>\n *   <div slot=\"footer\">Footer</div>\n * </popin-dialog>\n * ```\n * \n * @element popin-dialog\n * @htmltag popin-dialog\n * @htmlslot header - The header of the dialog\n * @htmlslot body - The body of the dialog\n * @htmlslot footer - The footer of the dialog\n * @htmlattr hidden - Hide the dialog\n * @htmlattr no-auto-close - Do not close the dialog when the user click outside of it\n * @fires {CustomEvent} popin-dialog-closed - Fires when the dialog is closed\n * @fires {CustomEvent} popin-dialog-opened - Fires when the dialog is opened\n * @cssprop {Color} --popin-dialog-background - The background color of the dialog\n * @cssprop {Color} --popin-dialog-header-background - The background color of the header\n * @cssprop {Color} --popin-dialog-body-background - The background color of the body\n * @cssprop {Color} --popin-dialog-footer-background - The background color of the footer\n * @cssprop {Color} --popin-dialog-header-color - The text color of the header\n * @cssprop {Color} --popin-dialog-body-color - The text color of the body\n * @cssprop {Color} --popin-dialog-footer-color - The text color of the footer\n * @cssprop {Border} --popin-dialog-header-border-bottom - The border of the header\n * @cssprop {Border} --popin-dialog-footer-border-top - The border of the footer\n * @cssprop {Padding} --popin-dialog-header-padding - The padding of the header\n * @cssprop {Padding} --popin-dialog-body-padding - The padding of the body\n * @cssprop {Padding} --popin-dialog-footer-padding - The padding of the footer\n * \n */\n\n@customElement('popin-dialog')\nexport class PopinDialog extends LitElement {\n  static override styles = css`\n  :host {\n  --popin-dialog-background: #fff;\n  --popin-dialog-header-background: #f5f5f5;\n  --popin-dialog-body-background: #f5f5f5;\n  --popin-dialog-footer-background: #f5f5f5;\n  --popin-dialog-header-color: #333;\n  --popin-dialog-body-color: #666;\n  --popin-dialog-footer-color: #333;\n  --popin-dialog-header-border-bottom: none;\n  --popin-dialog-footer-border-top: none;\n  --popin-dialog-header-padding: 0;\n  --popin-dialog-body-padding: 5px;\n  --popin-dialog-footer-padding: 0;\n}\n    :host {\n      display: inline-block;\n      position: absolute;\n      max-width: 100%;\n      box-sizing: border-box;\n      z-index: 1000; /* Ensure it's on top of other content */\n      border-radius: 8px;\n      overflow: hidden; /* To ensure border-radius applies to children elements */\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      display: inline-flex;\n      flex-direction: column;\n      background-color: var(--popin-dialog-background);\n    }\n    :host([hidden]) {\n      display: none !important;\n    }\n\nheader {\n  border-bottom: var(--popin-dialog-header-border-bottom);\n  background-color: var(--popin-dialog-header-background);\n  padding: var(--popin-dialog-header-padding);\n}\n\nfooter {\n  border-top: var(--popin-dialog-footer-border-top);\n  display: flex;\n  justify-content: flex-end;\n  background-color: var(--popin-dialog-footer-background);\n  padding: var(--popin-dialog-footer-padding);\n}\n\nmain {\n  background-color: var(--popin-dialog-body-background);\n  padding: var(--popin-dialog-body-padding);\n}\n  `;\n\n  @property()\n  override hidden = false;\n\n  @property({type: Boolean, attribute: 'no-auto-close'})\n  noAutoClose = false;\n\n  constructor() {\n    super()\n  }\n\n  override render() {\n    setTimeout(() => this.ensureElementInView());\n    return html`\n      <header>\n        <slot class=\"header\" name=\"header\"></slot>\n      </header>\n      <main>\n        <slot class=\"body\" name=\"body\"></slot>\n        <slot class=\"default\"></slot>\n      </main>\n      <footer>\n        <slot class=\"footer\" name=\"footer\"></slot>\n      </footer>\n    `;\n  }\n\n  private resized_ = this.ensureElementInView.bind(this);\n  private blured_ = this.blured.bind(this);\n  private keydown_ = this.keydown.bind(this);\n\n  override connectedCallback() {\n    super.connectedCallback();\n    // Make the element focusable\n    this.setAttribute('tabindex', \"0\")\n    // Attach events on this instance\n    this.addEventListener('blur', this.blured_)\n    this.addEventListener('keydown', this.keydown_)\n    // Attach elements on window\n    window.addEventListener('resize', this.resized_);\n  }\n\n  override disconnectedCallback() {\n    window.removeEventListener('resize', this.resized_);\n    this.removeEventListener('blur', this.blured_)\n    this.removeEventListener('keydown', this.keydown_)\n    super.disconnectedCallback();\n  }\n\n  private blured() {\n    if(this.noAutoClose) return\n\n    // Give the time to the click event to be processed\n    setTimeout(() => {\n      // Check if the focus is still inside the dialog\n      const focusedElement = document.activeElement\n      const popinDialog = focusedElement?.closest('popin-dialog')\n      if(popinDialog !== this) {\n        // Hide the dialog\n        this.setAttribute('hidden', '');\n      } else {\n        // Focus the dialog again so that this function\n        // will be called again when the user click outside\n        this.focus()\n      }\n    })\n  }\n\n  private keydown(event: KeyboardEvent) {\n    if (event.key === 'Escape') {\n      this.blur()\n    }\n  }\n\n  override attributeChangedCallback(name: string, _old: string | null, value: string | null): void {\n    super.attributeChangedCallback(name, _old, value);\n    if (name === 'hidden' && value === null) {\n      this.focus()\n      this.dispatchEvent(new CustomEvent('popin-dialog-opened'))\n    }\n    if (name === 'hidden' && value !== null) {\n      this.dispatchEvent(new CustomEvent('popin-dialog-closed'))\n    }\n  }\n\n  private ensureElementInView() {\n    // Reset the position\n    this.style.left = ''\n    this.style.top = ''\n\n    // Get the element's bounding rectangle\n    const rect = this.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    // Check if the element is out of the viewport on the right side\n    if (rect.right > viewportWidth) {\n      this.style.left = `${viewportWidth - rect.width}px`;\n    }\n\n    // Check if the element is out of the viewport on the left side\n    if (rect.left < 0) {\n      this.style.left = '0px';\n    }\n\n    // Check if the element is out of the viewport on the bottom\n    if (rect.bottom > viewportHeight) {\n      this.style.top = `${viewportHeight - rect.height}px`;\n    }\n\n    // Check if the element is out of the viewport on the top\n    if (rect.top < 0) {\n      this.style.top = '0px';\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'popin-dialog': PopinDialog;\n  }\n}\n"]}